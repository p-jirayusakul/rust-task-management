x-default-env: &default-env
  TZ: ${TZ:-Asia/Bangkok}
  LANG: ${LANG:-C.UTF-8}
  LC_ALL: ${LC_ALL:-C.UTF-8}

x-postgres-env: &postgres-env
  <<: *default-env
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
  POSTGRES_DB: ${POSTGRES_DB:-task_management}

services:
  db-postgres:
    image: postgres:16.4
    restart: unless-stopped
    environment:
      <<: *postgres-env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-container
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.com
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD:-1234}
    ports:
      - "5050:80"
    networks:
      - my_network
    depends_on:
      db-postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  migrate:
    image: migrate/migrate
    container_name: my_migration
    command: [
      "-path", "/migrations",
      "-database", "postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-1234}@db-postgres:5432/${POSTGRES_DB:-task_management}?sslmode=disable&search_path=public",
      "up"
    ]
    volumes:
      - ./src/internal/database/migrations:/migrations
    depends_on:
      db-postgres:
        condition: service_healthy
    networks:
      - my_network

  api-task-management-rust:
    build:
      context: .
      dockerfile: Dockerfile
    image: api-task-management-rust:latest
    restart: unless-stopped
    environment:
      DB_HOST: db-postgres
      DB_PORT: 5432
      DB_DATABASE: task_management
      DB_USERNAME: postgres
      DB_PASSWORD: 1234
      DB_SCHEMA: public
      APP_ENV: dev
      APP_PORT: 4000
      ALLOW_ORIGINS: http://localhost:3000
      JWT_SECRET: NhfWytDIzKNteB5zChVsYBYL99Yed4Cx
      JWT_EXPIRE_MILLISECOND: 28800000
    ports:
      - "4000:4000"
    depends_on:
      db-postgres:
        condition: service_healthy
    networks:
      - my_network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  my_network:
    driver: bridge